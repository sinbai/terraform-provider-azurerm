// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package parse

// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten

import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)

type VulnerabilityAssessmentsSettingsId struct {
	SubscriptionId                            string
	ServerVulnerabilityAssessmentsSettingName string
}

func NewVulnerabilityAssessmentsSettingsID(subscriptionId, serverVulnerabilityAssessmentsSettingName string) VulnerabilityAssessmentsSettingsId {
	return VulnerabilityAssessmentsSettingsId{
		SubscriptionId: subscriptionId,
		ServerVulnerabilityAssessmentsSettingName: serverVulnerabilityAssessmentsSettingName,
	}
}

func (id VulnerabilityAssessmentsSettingsId) String() string {
	segments := []string{
		fmt.Sprintf("Server Vulnerability Assessments Setting Name %q", id.ServerVulnerabilityAssessmentsSettingName),
	}
	segmentsStr := strings.Join(segments, " / ")
	return fmt.Sprintf("%s: (%s)", "Vulnerability Assessments Settings", segmentsStr)
}

func (id VulnerabilityAssessmentsSettingsId) ID() string {
	fmtString := "/subscriptions/%s/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings/%s"
	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ServerVulnerabilityAssessmentsSettingName)
}

// VulnerabilityAssessmentsSettingsID parses a VulnerabilityAssessmentsSettings ID into an VulnerabilityAssessmentsSettingsId struct
func VulnerabilityAssessmentsSettingsID(input string) (*VulnerabilityAssessmentsSettingsId, error) {
	id, err := resourceids.ParseAzureResourceID(input)
	if err != nil {
		return nil, fmt.Errorf("parsing %q as an VulnerabilityAssessmentsSettings ID: %+v", input, err)
	}

	resourceId := VulnerabilityAssessmentsSettingsId{
		SubscriptionId: id.SubscriptionID,
	}

	if resourceId.SubscriptionId == "" {
		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
	}

	if resourceId.ServerVulnerabilityAssessmentsSettingName, err = id.PopSegment("serverVulnerabilityAssessmentsSettings"); err != nil {
		return nil, err
	}

	if err := id.ValidateNoEmptySegments(input); err != nil {
		return nil, err
	}

	return &resourceId, nil
}
