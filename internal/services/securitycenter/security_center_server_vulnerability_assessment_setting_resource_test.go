package securitycenter_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
	"github.com/hashicorp/terraform-provider-azurerm/internal/acceptance"
	"github.com/hashicorp/terraform-provider-azurerm/internal/acceptance/check"
	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
)

type ServerVulnerabilityAssessmentsSettingsResource struct{}

func TestAccServerVulnerabilityAssessmentsSettings_update(t *testing.T) {

	data := acceptance.BuildTestData(t, "azurerm_security_center_server_vulnerability_assessment_setting", "test")

	r := ServerVulnerabilityAssessmentsSettingsResource{}
	data.ResourceTest(t, r, []acceptance.TestStep{
		{
			Config: r.setting(true),
			Check: acceptance.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
		{
			Config: r.setting(false),
			Check: acceptance.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
		{
			Config: r.setting(true),
			Check: acceptance.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
	})
}

func (r ServerVulnerabilityAssessmentsSettingsResource) Exists(ctx context.Context, clients *clients.Client, state *pluginsdk.InstanceState) (*bool, error) {
	id, err := parse.VulnerabilityAssessmentsSettingsID(state.ID)
	if err != nil {
		return nil, fmt.Errorf("while parsing resource ID: %+v", err)
	}

	resp, err := clients.SecurityCenter.ServerVulnerabilityAssessmentsSettingsClient.Get(ctx, commonids.SubscriptionId{SubscriptionId: id.SubscriptionId})
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			return pointer.To(false), nil
		}
		return nil, fmt.Errorf("while checking existence for %q: %+v", id.String(), err)
	}
	return pointer.To(resp.Model != nil), nil
}

func (r ServerVulnerabilityAssessmentsSettingsResource) setting(setting bool) string {
	return fmt.Sprintf(`
provider "azurerm" {
  features {
  }
}

resource "azurerm_security_center_server_vulnerability_assessment_setting" "test" {
  name                = "MdeTvm"
  microsoft_defender_endpoint_threat_vulnerability_management_enabled = %t
}
`, setting)
}
