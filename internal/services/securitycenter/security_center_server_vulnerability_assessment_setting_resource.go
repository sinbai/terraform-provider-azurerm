package securitycenter

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-provider-azurerm/internal/services/securitycenter/parse"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"

	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-helpers/resourcemanager/tags"
	"github.com/hashicorp/go-azure-sdk/resource-manager/servicenetworking/2023-05-01-preview/frontendsinterface"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-azurerm/internal/sdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
)

type ServerVulnerabilityAssessmentsSettingsResource struct{}

type ServerVulnerabilityAssessmentsSettingsModel struct {
	Name          string `tfschema:"name"`
	MdeTvmEnabled bool   `tfschema:"microsoft_defender_endpoint_threat_vulnerability_management_enabled"`
}

var _ sdk.Resource = ServerVulnerabilityAssessmentsSettingsResource{}

func (f ServerVulnerabilityAssessmentsSettingsResource) Arguments() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"name": {
			Type:         pluginsdk.TypeString,
			Required:     true,
			ForceNew:     true,
			ValidateFunc: validation.StringIsNotEmpty,
		},
		"microsoft_defender_endpoint_threat_vulnerability_management_enabled": {
			Type:     pluginsdk.TypeBool,
			Optional: true,
			Default:  false,
		},
	}
}

func (f ServerVulnerabilityAssessmentsSettingsResource) Attributes() map[string]*schema.Schema {
	return map[string]*schema.Schema{}
}

func (f ServerVulnerabilityAssessmentsSettingsResource) ModelObject() interface{} {
	return &ServerVulnerabilityAssessmentsSettingsModel{}
}

func (f ServerVulnerabilityAssessmentsSettingsResource) ResourceType() string {
	return "azurerm_application_load_balancer_frontend"
}

func (f ServerVulnerabilityAssessmentsSettingsResource) IDValidationFunc() pluginsdk.SchemaValidateFunc {
	return frontendsinterface.ValidateFrontendID
}

func (f ServerVulnerabilityAssessmentsSettingsResource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.SecurityCenter.ServerVulnerabilityAssessmentsSettingsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var config ServerVulnerabilityAssessmentsSettingsModel
			if err := metadata.Decode(&config); err != nil {
				return fmt.Errorf("decoding %v", err)
			}

			id := parse.NewVulnerabilityAssessmentsSettingsID(subscriptionId, "azureServersSetting")

			resp, err := client.Get(ctx, commonids.SubscriptionId{SubscriptionId: subscriptionId})
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			if resp.Model == nil {
				return fmt.Errorf("retrieving %s: Model was nil", id)
			}

			if _, err := client.CreateOrUpdate(ctx, commonids.SubscriptionId{SubscriptionId: subscriptionId}, nil); err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}

			metadata.SetID(id)

			return nil
		},
	}
}

func (f ServerVulnerabilityAssessmentsSettingsResource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.SecurityCenter.ServerVulnerabilityAssessmentsSettingsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			id, err := parse.VulnerabilityAssessmentsSettingsID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			resp, err := client.Get(ctx, commonids.SubscriptionId{SubscriptionId: subscriptionId})
			if err != nil {
				if response.WasNotFound(resp.HttpResponse) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", metadata.ResourceData.Id(), err)
			}

			state := ServerVulnerabilityAssessmentsSettingsModel{
				Name: id.ServerVulnerabilityAssessmentsSettingName,
			}

			if model := resp.Model; model != nil {
				//state.MdeTvmEnabled = model.
				//
				//if prop := model.Properties; prop != nil {
				//	state.Fqdn = pointer.From(prop.Fqdn)
				//}
			}

			return metadata.Encode(&state)
		},
	}
}

func (f ServerVulnerabilityAssessmentsSettingsResource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.SecurityCenter.ServerVulnerabilityAssessmentsSettingsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			id, err := parse.VulnerabilityAssessmentsSettingsID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var config ServerVulnerabilityAssessmentsSettingsModel
			if err := metadata.Decode(&config); err != nil {
				return fmt.Errorf("decoding %v", err)
			}

			if metadata.ResourceData.HasChange("microsoft_defender_endpoint_threat_vulnerability_management_enabled") {
				if config.MdeTvmEnabled {
					if _, err := client.CreateOrUpdate(ctx, commonids.SubscriptionId{SubscriptionId: subscriptionId}, nil); err != nil {
						return fmt.Errorf("updating `azurerm_security_center_server_vulnerability_assessment_setting` %s: %+v", *id, err)
					}
				}else{
					if err := client.Delete(ctx, commonids.SubscriptionId{SubscriptionId: subscriptionId); err != nil {
						return fmt.Errorf("deleting %q: %+v", id.ID(), err)
					}
				}
			}
			return nil
		},
	}
}

func (f ServerVulnerabilityAssessmentsSettingsResource) Delete() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.SecurityCenter.ServerVulnerabilityAssessmentsSettingsClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			if err := client.Delete(ctx, commonids.SubscriptionId{SubscriptionId: subscriptionId); err != nil {
				return fmt.Errorf("deleting %q: %+v", id.ID(), err)
			}

			return nil
		},
	}
}
